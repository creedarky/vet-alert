{"version":3,"sources":["config/socketio.js"],"names":["socketio","cache","on","socket","console","log","address","request","connection","remoteAddress","remotePort","connectedAt","Date","data","nsp","name","emit","getCurrentPatients"],"mappings":"AAAA;;;AAGA;;;;;;kBASe,UAASA,QAAT,EAAmBC,KAAnB,EAA0B;AACvC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAD,WAASE,EAAT,CAAY,YAAZ,EAA0B,UAASC,MAAT,EAAiB;AACzCC,YAAQC,GAAR,CAAY,YAAZ;AACAF,WAAOG,OAAP,GAAoBH,OAAOI,OAAP,CAAeC,UAAf,CAA0BC,aAA9C,SAA+DN,OAAOI,OAAP,CAAeC,UAAf,CAA0BE,UAAzF;;AAEAP,WAAOQ,WAAP,GAAqB,IAAIC,IAAJ,EAArB;;AAEAT,WAAOE,GAAP,GAAa,YAAkB;AAAA;;AAAA,wCAANQ,IAAM;AAANA,YAAM;AAAA;;AAC7B,2BAAQR,GAAR,gCAAwBF,OAAOW,GAAP,CAAWC,IAAnC,UAA4CZ,OAAOG,OAAnD,eAAkEO,IAAlE;AACD,KAFD;;AAIAV,WAAOD,EAAP,CAAU,YAAV,EAAwB,YAAM;AAC5BC,aAAOE,GAAP,CAAW,cAAX;AACD,KAFD;AAGAF,WAAOa,IAAP,CAAY,kBAAZ,EAAgCf,MAAMgB,kBAAN,EAAhC;AACAd,WAAOE,GAAP,CAAW,WAAX;AACD,GAfD;AAgBD,C;;AAvCD","file":"socketio.js","sourcesContent":["/**\n * Socket.io configuration\n */\n'use strict';\n\nimport config from './environment';\n\n\n\n\n// When the user connects.. perform this\n\nexport default function(socketio, cache) {\n  // socket.io (v1.x.x) is powered by debug.\n  // In order to see all the debug output, set DEBUG (in server/config/local.env.js) to including the desired scope.\n  //\n  // ex: DEBUG: \"http*,socket.io:socket\"\n\n  // We can authenticate socket.io users and access their token through socket.decoded_token\n  //\n  // 1. You will need to send the token in `client/components/socket/socket.service.js`\n  //\n  // 2. Require authentication here:\n  // socketio.use(require('socketio-jwt').authorize({\n  //   secret: config.secrets.session,\n  //   handshake: true\n  // }));\n\n  socketio.on('connection', function(socket) {\n    console.log('connection');\n    socket.address = `${socket.request.connection.remoteAddress}:${socket.request.connection.remotePort}`;\n\n    socket.connectedAt = new Date();\n\n    socket.log = function(...data) {\n      console.log(`SocketIO ${socket.nsp.name} [${socket.address}]`, ...data);\n    };\n\n    socket.on('disconnect', () => {\n      socket.log('DISCONNECTED');\n    });\n    socket.emit('updated-patients', cache.getCurrentPatients());\n    socket.log('CONNECTED');\n  });\n}\n"]}