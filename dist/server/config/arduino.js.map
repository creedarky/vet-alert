{"version":3,"sources":["config/arduino.js"],"names":["socketio","cache","arduinoScanner","console","log","start","isWin","platform","prefix","pacientes","getCurrentPatients","sp","monitorData","monitoresActivos","emitter","on","pacientesActualizados","sockets","emit","createMonitor","idMonitor","upsert","id","activo","addData","data","tipo","latidos","temperatura","monitor","getMonitor","length","paciente","status","calcularStatus","especie","estado","ESTADOS","OK","margen","MIN_DANGER","DANGER","MIN_WARNING","WARNING","mensajes","getMensaje","alerta","actualizarAlerta","fecha","diff","Date","getTime","setMonitor","idPaciente","promedioTemp","promedioPpm","find","p","temperaturas","latido","movimiento","push","MAX_LENGTH","promedios","calcularPromedio","create","promedioTemperatura","estadoMovimiento","estadoTemperatura","estadoPaciente","estadoPpm","id_paciente","totalLatidos","reduce","a","b","totalTemperatura","maxTemp","minTemp","maxPpm","minPpm","porcentajeTemperatura","porcentajeLatidos","Math","abs","mensaje","response","stop","serialNumber","port","baudrate","parser","parsers","readline","e","parsedData","JSON","parse"],"mappings":";;;;;;;;;;kBAgBe,UAASA,QAAT,EAAmBC,KAAnB,EAA0B;AACvC,MAAMC,iBAAiB,uBAAvB;AACAC,UAAQC,GAAR,CAAY,wBAAZ;AACAF,iBAAeG,KAAf,CAAqB,KAArB;AACA,MAAMC,QAAQ,aAAGC,QAAH,OAAkB,OAAhC;AACA,MAAMC,SAASF,QAAQ,SAAR,GAAoB,EAAnC;AACA,MAAIG,YAAYR,MAAMS,kBAAN,EAAhB;AACA,MAAIC,KAAK,EAAT,CAPuC,CAO1B;AACb,MAAIC,cAAc,EAAlB;AACA,MAAIC,mBAAmB,EAAvB;AACAZ,QAAMa,OAAN,CAAcC,EAAd,CAAiB,iBAAjB,EAAoC,UAACC,qBAAD,EAA2B;AAC7DP,gBAAYO,qBAAZ;AACAhB,aAASiB,OAAT,CAAiBC,IAAjB,CAAsB,kBAAtB,EAA0CF,qBAA1C;AACD,GAHD;;AAKA,MAAMG,gBAAgB,SAAhBA,aAAgB,CAACC,SAAD,EAAe;AACnC,QAAIP,iBAAiBO,SAAjB,CAAJ,EAAiC;AAC/B;AACD;AACD,mBAAQC,MAAR,CACE;AACEC,UAAIF,SADN;AAEEG,cAAQ;AAFV,KADF;AAMAV,qBAAiBO,SAAjB,IAA8BA,SAA9B;AACD,GAXD;;AAaA,MAAMI,UAAU,SAAVA,OAAU,CAACC,IAAD,EAAU;AACxB,QAAIA,KAAKC,IAAL,KAAc,QAAlB,EAA4B;AAC1B1B,eAASiB,OAAT,CAAiBC,IAAjB,CAAsB,MAAtB,EAA8BO,IAA9B;AACA;AACD;AACDtB,YAAQC,GAAR,CAAY,SAAZ,EAAsBqB,KAAKE,OAA3B;AACAxB,YAAQC,GAAR,CAAY,aAAZ,EAA0BqB,KAAKG,WAA/B;AACA,QAAIC,UAAUC,WAAWL,IAAX,CAAd;AACAtB,YAAQC,GAAR,CAAY,SAAZ,EAAuByB,QAAQF,OAAR,CAAgBI,MAAvC;AACA,QAAIC,WAAWH,QAAQG,QAAvB;;AAEA,QAAMC,SAASC,eAAeL,OAAf,EAAwBG,SAASG,OAAjC,CAAf;;AAEA,QAAIC,SAASC,QAAQC,EAArB;;AAEA,QAAIL,OAAOM,MAAP,GAAgBC,UAApB,EAAgC;AAAE;AAChCJ,eAASC,QAAQI,MAAjB;AACD,KAFD,MAEO,IAAIR,OAAOM,MAAP,GAAgBG,WAApB,EAAgC;AACrCN,eAASC,QAAQM,OAAjB;AACD;;AAEDd,YAAQO,MAAR,GAAiBA,MAAjB;AACAX,SAAKW,MAAL,GAAcA,MAAd;AACA,QAAIQ,WAAWC,WAAWZ,MAAX,CAAf;AACA,QAAIW,SAASb,MAAb,EAAqB;AACnB,UAAIe,SAASjB,QAAQiB,MAAR,IAAkB,EAA/B;AACA,UAAIC,mBAAmB,qBAAMD,OAAOE,KAAb,KAAuB,wBAASC,IAAT,CAAc,sBAAOH,OAAOE,KAAd,CAAd,EAAoC,SAApC,KAAkD,CAAzE,IAA+EZ,WAAWU,OAAOpB,IAAlB,IAA0BU,WAAWC,QAAQI,MAAnJ;AACA,UAAIO,QAAQ,IAAIE,IAAJ,EAAZ;AACArB,cAAQiB,MAAR,GAAiBC,mBAAmB;AAClCzB,iBAAOO,QAAQP,EAAf,GAAoBO,QAAQG,QAAR,CAAiBV,EAArC,GAA0C0B,MAAMG,OAAN,EADR;AAElCH,oBAFkC;AAGlCJ,0BAHkC;AAIlClB,cAAMU;AAJ4B,OAAnB,GAKbU,MALJ;AAMAM,iBAAWvB,OAAX;AACA;AACD;AACDJ,SAAKqB,MAAL,GAAcjB,QAAQiB,MAAtB;AACArB,SAAK4B,UAAL,GAAkBrB,SAASV,EAA3B;AACAG,SAAK6B,YAAL,GAAoBzB,QAAQyB,YAA5B;AACA7B,SAAK8B,WAAL,GAAmB1B,QAAQ0B,WAA3B;AACApD,YAAQC,GAAR,CAAY,SAAZ,EAAuBqB,IAAvB;AACAzB,aAASiB,OAAT,CAAiBC,IAAjB,CAAsB,MAAtB,EAA8BO,IAA9B;AACD,GA3CD;;AA6CA,MAAMK,aAAa,SAAbA,UAAa,CAACL,IAAD,EAAU;AAC3B,QAAII,gBAAJ;AACA,QAAIjB,YAAYa,KAAKL,SAAjB,CAAJ,EAAiC;AAC/BS,gBAAUjB,YAAYa,KAAKL,SAAjB,CAAV;AACD,KAFD,MAEO;AACL,UAAIY,WAAWvB,UAAU+C,IAAV,CAAe,aAAK;AACjC,eAAOC,EAAE5B,OAAF,CAAUP,EAAV,KAAiBG,KAAKL,SAA7B;AACD,OAFc,CAAf;AAGAR,kBAAYa,KAAKL,SAAjB,IAA8B;AAC5BE,YAAIG,KAAKL,SADmB;AAE5BY,kBAAUA,QAFkB;AAG5BL,iBAAS,EAHmB;AAI5B+B,sBAAc,EAJc;AAK5BJ,sBAAc,CALc;AAM5BC,qBAAa,CANe;AAO5BI,gBAAQ,IAPoB;AAQ5B/B,qBAAa,IARe;AAS5BgC,oBAAY;AATgB,OAA9B;;AAYA/B,gBAAUjB,YAAYa,KAAKL,SAAjB,CAAV;AACD;;AAED,QAAIK,KAAKE,OAAT,EAAkB;AAChBE,cAAQF,OAAR,CAAgBkC,IAAhB,CAAqBpC,KAAKE,OAA1B;AACAE,cAAQ8B,MAAR,GAAiBlC,KAAKE,OAAtB;AACD,KAHD,MAGO,IAAIF,KAAKG,WAAT,EAAsB;AAC3BC,cAAQ6B,YAAR,CAAqBG,IAArB,CAA0BpC,KAAKG,WAA/B;AACAC,cAAQD,WAAR,GAAsBH,KAAKG,WAA3B;AACAC,cAAQ+B,UAAR,GAAqBnC,KAAKmC,UAA1B;AACD;;AAED,QAAI/B,QAAQF,OAAR,CAAgBI,MAAhB,IAA0B+B,UAA1B,IAAwCjC,QAAQ6B,YAAR,CAAqB3B,MAArB,IAA+B+B,UAA3E,EAAuF;AACrF,UAAMC,YAAYC,iBAAiBnC,QAAQF,OAAzB,EAAkCE,QAAQ6B,YAA1C,CAAlB;AACA7B,gBAAU,sBAAc,EAAd,EAAkBA,OAAlB,EAA2BkC,SAA3B,CAAV;AACAlC,cAAQF,OAAR,GAAkB,EAAlB;AACAE,cAAQ6B,YAAR,GAAuB,EAAvB;;AAEA,+BAAkBO,MAAlB,CAAyB;AACvBC,6BAAqBH,UAAUT,YADR;AAEvBC,qBAAaQ,UAAUR,WAFA;AAGvBY,0BAAkBtC,QAAQ+B,UAHH;AAIvBQ,2BAAmBvC,QAAQD,WAJJ;AAKvByC,wBAAgBxC,QAAQO,MALD;AAMvBkC,mBAAWzC,QAAQ8B,MANI;AAOvBY,qBAAa1C,QAAQG,QAAR,CAAiBV;AAPP,OAAzB;AASD;;AAED8B,eAAWvB,OAAX;;AAEA,WAAOA,OAAP;AACD,GApDD;;AAsDA,MAAMuB,aAAa,SAAbA,UAAa,CAACvB,OAAD,EAAa;AAC9BjB,gBAAYiB,QAAQP,EAApB,IAA0BO,OAA1B;AACD,GAFD;;AAIA,MAAMmC,mBAAmB,SAAnBA,gBAAmB,CAACrC,OAAD,EAAU+B,YAAV,EAA2B;AAClD,QAAIc,eAAe7C,QAChB8C,MADgB,CACT,UAACC,CAAD,EAAIC,CAAJ;AAAA,aAAUD,IAAIC,CAAd;AAAA,KADS,EACQ,CADR,CAAnB;AAEA,QAAIC,mBAAmBlB,aACpBe,MADoB,CACb,UAACC,CAAD,EAAIC,CAAJ;AAAA,aAAUD,IAAIC,CAAd;AAAA,KADa,EACI,CADJ,CAAvB;;AAGA,WAAO;AACLrB,oBAAcsB,mBAAmBlB,aAAa3B,MADzC;AAELwB,mBAAaiB,eAAe7C,QAAQI;AAF/B,KAAP;AAID,GAVD;;AAYA,MAAMG,iBAAiB,SAAjBA,cAAiB,CAACL,OAAD,EAAUM,OAAV,EAAsB;AAAA,QACnCP,WADmC,GACXC,OADW,CACnCD,WADmC;AAAA,QACtB+B,MADsB,GACX9B,OADW,CACtB8B,MADsB;AAAA,QAEnCkB,OAFmC,GAEE1C,OAFF,CAEnC0C,OAFmC;AAAA,QAE1BC,OAF0B,GAEE3C,OAFF,CAE1B2C,OAF0B;AAAA,QAEjBC,MAFiB,GAEE5C,OAFF,CAEjB4C,MAFiB;AAAA,QAETC,MAFS,GAEE7C,OAFF,CAET6C,MAFS;;AAG3C,QAAIC,wBAAwB,CAA5B;AACA,QAAIC,oBAAoB,CAAxB;AACA,QAAItD,cAAciD,OAAlB,EAA2B;AACzBI,8BAAyBrD,cAAc,GAAd,GAAoBiD,OAArB,GAAgC,GAAxD;AACD,KAFD,MAEO,IAAIjD,cAAckD,OAAlB,EAA2B;AAChCG,8BAAyBrD,cAAc,GAAd,GAAoBkD,OAArB,GAAgC,GAAxD;AACD;;AAED,QAAInB,SAASoB,MAAb,EAAqB;AACnBG,0BAAqBvB,SAAS,GAAT,GAAeoB,MAAhB,GAA0B,GAA9C;AACD,KAFD,MAEO,IAAIpB,SAASqB,MAAb,EAAqB;AAC1BE,0BAAqBvB,SAAS,GAAT,GAAeqB,MAAhB,GAA0B,GAA9C;AACD;AACD,WAAQ;AACNE,0CADM;AAEND,kDAFM;AAGN1C,cAAQ4C,KAAKC,GAAL,CAASF,iBAAT,IAA8BC,KAAKC,GAAL,CAASH,qBAAT;AAHhC,KAAR;AAKD,GArBD;;AAuBA,MAAMpC,aAAa,SAAbA,UAAa,CAACZ,MAAD,EAAY;AAC7B,QAAIW,WAAW,EAAf;AACA,QAAIX,OAAOiD,iBAAP,KAA6B,CAAjC,EAAoC;AAClC,UAAIG,UAAUpD,OAAOiD,iBAAP,GAA2B,CAA3B,GAA+B,wBAA/B,GAA0D,qBAAxE;AACAtC,eAASiB,IAAT,CAAcwB,OAAd;AACD;AACD,QAAIpD,OAAOgD,qBAAP,KAAiC,CAArC,EAAwC;AACtC,UAAII,WAAUpD,OAAOgD,qBAAP,GAA+B,CAA/B,GAAmC,kCAAnC,GAAwE,+BAAtF;AACArC,eAASiB,IAAT,CAAcwB,QAAd;AACD;AACD,WAAOzC,QAAP;AACD,GAXD;;AAeA1C,iBAAea,EAAf,CAAkB,cAAlB,EAAkC,UAAUuE,QAAV,EAAoB;AACpDpF,mBAAeqF,IAAf;AACA,QAAI5E,GAAG2E,SAASE,YAAZ,CAAJ,EAA+B;AAC7B;AACD;AACD;AACA7E,OAAG2E,SAASE,YAAZ,IAA4B,8BAAkBhF,MAAlB,GAA2B8E,SAASG,IAApC,EAA4C;AACtEC,gBAAU,MAD4D;AAEtEC,cAAQ,qBAAWC,OAAX,CAAmBC,QAAnB,CAA4B,IAA5B;AAF8D,KAA5C,EAGzB;AAAA,aAAK1F,QAAQC,GAAR,CAAY0F,CAAZ,CAAL;AAAA,KAHyB,CAA5B;;AAKAnF,OAAG2E,SAASE,YAAZ,EAA0BzE,EAA1B,CAA6B,MAA7B,EAAqC,YAAY;AAC/CZ,cAAQC,GAAR,CAAY,MAAZ;AACD,KAFD;AAGAO,OAAG2E,SAASE,YAAZ,EAA0BzE,EAA1B,CAA6B,MAA7B,EAAqC,UAAUU,IAAV,EAAgB;AACnD;AACA,UAAIsE,aAAa,IAAjB;AACA,UAAI;AACFA,qBAAaC,KAAKC,KAAL,CAAWxE,IAAX,CAAb;AACAN,sBAAc4E,WAAW3E,SAAzB;AACAI,gBAAQuE,UAAR;AAED,OALD,CAKE,OAAOD,CAAP,EAAU;AACV3F,gBAAQC,GAAR,CAAY0F,CAAZ;AACD;AACF,KAXD;AAYD,GA1BD;AA4BD,C;;AAjOD;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMpD,cAAc,CAApB;AACA,IAAMF,aAAa,CAAnB;AACA,IAAMsB,aAAa,GAAnB;AACA,IAAMzB,UAAU;AACdC,MAAI,IADU;AAEdK,WAAS,SAFK;AAGdF,UAAQ;AAHM,CAAhB","file":"arduino.js","sourcesContent":["import SerialPort from 'serialport';\nimport os from 'os';\nimport { Monitor, MonitoreoPaciente } from '../sqldb';\nimport ArduinoScanner from '../scanner';\nimport moment from 'moment';\nimport isNil from 'lodash/isNil';\n\nconst MIN_WARNING = 0;\nconst MIN_DANGER = 1;\nconst MAX_LENGTH = 250;\nconst ESTADOS = {\n  OK: 'ok',\n  WARNING: 'warning',\n  DANGER: 'danger'\n};\n\nexport default function(socketio, cache) {\n  const arduinoScanner = new ArduinoScanner();\n  console.log('inicia arduino scanner');\n  arduinoScanner.start(10000);\n  const isWin = os.platform() === 'win32';\n  const prefix = isWin ? '\\\\\\\\.\\\\' : '';\n  let pacientes = cache.getCurrentPatients();\n  let sp = {}; //Serial port\n  let monitorData = {};\n  let monitoresActivos = {};\n  cache.emitter.on('update-patients', (pacientesActualizados) => {\n    pacientes = pacientesActualizados;\n    socketio.sockets.emit('updated-patients', pacientesActualizados);\n  });\n\n  const createMonitor = (idMonitor) => {\n    if (monitoresActivos[idMonitor]) {\n      return;\n    }\n    Monitor.upsert(\n      {\n        id: idMonitor,\n        activo: true\n      }\n    );\n    monitoresActivos[idMonitor] = idMonitor\n  };\n\n  const addData = (data) => {\n    if (data.tipo !== 'estado') {\n      socketio.sockets.emit('data', data);\n      return;\n    }\n    console.log('latidos',data.latidos);\n    console.log('temperatura',data.temperatura);\n    let monitor = getMonitor(data);\n    console.log('monitor', monitor.latidos.length);\n    let paciente = monitor.paciente;\n\n    const status = calcularStatus(monitor, paciente.especie);\n\n    let estado = ESTADOS.OK;\n\n    if (status.margen > MIN_DANGER) { // TODO definir el porcentaje\n      estado = ESTADOS.DANGER;\n    } else if (status.margen > MIN_WARNING){\n      estado = ESTADOS.WARNING;\n    }\n\n    monitor.estado = estado;\n    data.estado = estado;\n    let mensajes = getMensaje(status);\n    if (mensajes.length) {\n      let alerta = monitor.alerta || {};\n      let actualizarAlerta = isNil(alerta.fecha) || moment().diff(moment(alerta.fecha), 'minutes') >= 5 || (estado !== alerta.tipo && estado === ESTADOS.DANGER);\n      let fecha = new Date();\n      monitor.alerta = actualizarAlerta ? {\n        id: `${monitor.id}${monitor.paciente.id}${fecha.getTime()}`,\n        fecha,\n        mensajes,\n        tipo: estado\n      } : alerta;\n      setMonitor(monitor);\n      // TODO aca deberia mandar notificacion\n    }\n    data.alerta = monitor.alerta;\n    data.idPaciente = paciente.id;\n    data.promedioTemp = monitor.promedioTemp;\n    data.promedioPpm = monitor.promedioPpm;\n    console.log('to emit', data);\n    socketio.sockets.emit('data', data);\n  };\n\n  const getMonitor = (data) => {\n    let monitor;\n    if (monitorData[data.idMonitor]) {\n      monitor = monitorData[data.idMonitor];\n    } else {\n      let paciente = pacientes.find(p => {\n        return p.monitor.id === data.idMonitor\n      });\n      monitorData[data.idMonitor] = {\n        id: data.idMonitor,\n        paciente: paciente,\n        latidos: [],\n        temperaturas: [],\n        promedioTemp: 0,\n        promedioPpm: 0,\n        latido: null,\n        temperatura: null,\n        movimiento: null\n      };\n\n      monitor = monitorData[data.idMonitor];\n    }\n\n    if (data.latidos) {\n      monitor.latidos.push(data.latidos);\n      monitor.latido = data.latidos;\n    } else if (data.temperatura) {\n      monitor.temperaturas.push(data.temperatura);\n      monitor.temperatura = data.temperatura;\n      monitor.movimiento = data.movimiento;\n    }\n\n    if (monitor.latidos.length >= MAX_LENGTH || monitor.temperaturas.length >= MAX_LENGTH) {\n      const promedios = calcularPromedio(monitor.latidos, monitor.temperaturas);\n      monitor = Object.assign({}, monitor, promedios);\n      monitor.latidos = [];\n      monitor.temperaturas = [];\n\n      MonitoreoPaciente.create({\n        promedioTemperatura: promedios.promedioTemp,\n        promedioPpm: promedios.promedioPpm,\n        estadoMovimiento: monitor.movimiento,\n        estadoTemperatura: monitor.temperatura,\n        estadoPaciente: monitor.estado,\n        estadoPpm: monitor.latido,\n        id_paciente: monitor.paciente.id\n      });\n    }\n\n    setMonitor(monitor);\n\n    return monitor\n  };\n\n  const setMonitor = (monitor) => {\n    monitorData[monitor.id] = monitor;\n  };\n\n  const calcularPromedio = (latidos, temperaturas) => {\n    let totalLatidos = latidos\n      .reduce((a, b) => a + b, 0);\n    let totalTemperatura = temperaturas\n      .reduce((a, b) => a + b, 0);\n\n    return {\n      promedioTemp: totalTemperatura / temperaturas.length,\n      promedioPpm: totalLatidos / latidos.length\n    };\n  };\n\n  const calcularStatus = (monitor, especie) => {\n    const { temperatura, latido } = monitor;\n    const { maxTemp, minTemp, maxPpm, minPpm } = especie;\n    let porcentajeTemperatura = 0;\n    let porcentajeLatidos = 0;\n    if (temperatura > maxTemp) {\n      porcentajeTemperatura = (temperatura * 100 / maxTemp) - 100;\n    } else if (temperatura < minTemp) {\n      porcentajeTemperatura = (temperatura * 100 / minTemp) - 100;\n    }\n\n    if (latido > maxPpm) {\n      porcentajeLatidos = (latido * 100 / maxPpm) - 100;\n    } else if (latido < minPpm) {\n      porcentajeLatidos = (latido * 100 / minPpm) - 100;\n    }\n    return  {\n      porcentajeLatidos,\n      porcentajeTemperatura,\n      margen: Math.abs(porcentajeLatidos) + Math.abs(porcentajeTemperatura)\n    };\n  };\n\n  const getMensaje = (status) => {\n    let mensajes = [];\n    if (status.porcentajeLatidos !== 0) {\n      let mensaje = status.porcentajeLatidos > 0 ? 'Ritmo cardiaco elevado' : 'Ritmo cardiaco bajo';\n      mensajes.push(mensaje);\n    }\n    if (status.porcentajeTemperatura !== 0) {\n      let mensaje = status.porcentajeTemperatura > 0 ? 'Temperatura del paciente elevada' : 'Temperatura del paciente baja';\n      mensajes.push(mensaje);\n    }\n    return mensajes;\n  };\n\n\n\n  arduinoScanner.on('arduinoFound', function (response) {\n    arduinoScanner.stop();\n    if (sp[response.serialNumber]) {\n      return;\n    }\n    // connectToArduino(response.port);\n    sp[response.serialNumber] = new SerialPort(`${prefix}${response.port}`, {\n      baudrate: 115200,\n      parser: SerialPort.parsers.readline('\\n')\n    }, e => console.log(e));\n\n    sp[response.serialNumber].on('open', function () {\n      console.log('open');\n    });\n    sp[response.serialNumber].on('data', function (data) {\n      // console.log(data);\n      let parsedData = null;\n      try {\n        parsedData = JSON.parse(data);\n        createMonitor(parsedData.idMonitor);\n        addData(parsedData);\n\n      } catch (e) {\n        console.log(e);\n      }\n    });\n  });\n\n}\n\n\n"]}