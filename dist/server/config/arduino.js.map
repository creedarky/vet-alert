{"version":3,"sources":["config/arduino.js"],"names":["socketio","cache","arduinoScanner","console","log","start","isWin","platform","prefix","pacientes","getCurrentPatients","sp","monitorData","monitoresActivos","emitter","on","pacientesActualizados","forEach","currentMonitor","p","monitor","id","paciente","sockets","emit","createMonitor","idMonitor","upsert","activo","addData","data","tipo","getMonitor","status","calcularStatus","especie","estado","ESTADOS","OK","margen","MIN_DANGER","DANGER","MIN_WARNING","WARNING","mensajes","getMensaje","length","alerta","actualizarAlerta","fecha","diff","Date","getTime","setMonitor","idPaciente","promedioTemp","promedioPpm","find","latidos","temperaturas","latido","temperatura","movimiento","push","MAX_LENGTH","promedios","calcularPromedio","create","promedioTemperatura","estadoMovimiento","estadoTemperatura","estadoPaciente","estadoPpm","id_paciente","totalLatidos","reduce","a","b","totalTemperatura","maxTemp","minTemp","maxPpm","minPpm","porcentajeTemperatura","porcentajeLatidos","Math","abs","mensaje","response","serialNumber","port","baudrate","parser","parsers","readline","e","parsedData","JSON","parse"],"mappings":"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","file":"arduino.js","sourcesContent":["import SerialPort from 'serialport';\nimport os from 'os';\nimport { Monitor, MonitoreoPaciente } from '../sqldb';\nimport ArduinoScanner from '../scanner';\nimport moment from 'moment';\nimport isNil from 'lodash/isNil';\n\nconst MIN_WARNING = 0;\nconst MIN_DANGER = 1;\nconst MAX_LENGTH = 250;\nconst ESTADOS = {\n  OK: 'ok',\n  WARNING: 'warning',\n  DANGER: 'danger'\n};\n\nexport default function(socketio, cache) {\n  const arduinoScanner = new ArduinoScanner();\n  console.log('inicia arduino scanner');\n  arduinoScanner.start(10000);\n  const isWin = os.platform() === 'win32';\n  const prefix = isWin ? '\\\\\\\\.\\\\' : '';\n  let pacientes = cache.getCurrentPatients();\n  let sp = {}; //Serial port\n  let monitorData = {};\n  let monitoresActivos = {};\n  cache.emitter.on('update-patients', (pacientesActualizados) => {\n    // console.log('pacientes actualizados????/????')\n    pacientes = pacientesActualizados;\n    pacientes.forEach(p => {\n      const currentMonitor = monitorData[p.monitor.id];\n      if (currentMonitor && currentMonitor.paciente.id !== p.id) {\n        monitorData[p.monitor.id] = null;\n      }\n    });\n    socketio.sockets.emit('updated-patients', pacientesActualizados);\n  });\n\n  const createMonitor = (idMonitor) => {\n    if (monitoresActivos[idMonitor]) {\n      return;\n    }\n    Monitor.upsert(\n      {\n        id: idMonitor,\n        activo: true\n      }\n    );\n    monitoresActivos[idMonitor] = idMonitor\n  };\n\n  const addData = (data) => {\n    if (data.tipo !== 'estado') {\n      socketio.sockets.emit('data', data);\n      return;\n    }\n    let monitor = getMonitor(data);\n    let paciente = monitor.paciente;\n\n    const status = calcularStatus(monitor, paciente.especie);\n\n    let estado = ESTADOS.OK;\n\n    if (status.margen > MIN_DANGER) { // TODO definir el porcentaje\n      estado = ESTADOS.DANGER;\n    } else if (status.margen > MIN_WARNING){\n      estado = ESTADOS.WARNING;\n    }\n\n    monitor.estado = estado;\n    data.estado = estado;\n    let mensajes = getMensaje(status);\n    if (mensajes.length) {\n      let alerta = monitor.alerta || {};\n      let actualizarAlerta = isNil(alerta.fecha) || moment().diff(moment(alerta.fecha), 'minutes') >= 5 || (estado !== alerta.tipo && estado === ESTADOS.DANGER);\n      let fecha = new Date();\n      monitor.alerta = actualizarAlerta ? {\n        id: `${monitor.id}${monitor.paciente.id}${fecha.getTime()}`,\n        fecha,\n        mensajes,\n        tipo: estado\n      } : alerta;\n      setMonitor(monitor);\n      // TODO aca deberia mandar notificacion\n    }\n    data.alerta = monitor.alerta;\n    data.idPaciente = paciente.id;\n    data.promedioTemp = monitor.promedioTemp;\n    data.promedioPpm = monitor.promedioPpm;\n    // console.log('to emit', data);\n    socketio.sockets.emit('data', data);\n  };\n\n  const getMonitor = (data) => {\n    let monitor;\n    if (monitorData[data.idMonitor]) {\n      monitor = monitorData[data.idMonitor];\n    } else {\n      let paciente = pacientes.find(p => {\n        return p.monitor.id === data.idMonitor\n      });\n      monitorData[data.idMonitor] = {\n        id: data.idMonitor,\n        paciente: paciente,\n        latidos: [],\n        temperaturas: [],\n        promedioTemp: 0,\n        promedioPpm: 0,\n        latido: null,\n        temperatura: null,\n        movimiento: null\n      };\n\n      monitor = monitorData[data.idMonitor];\n    }\n\n    if (data.latidos) {\n      monitor.latidos.push(data.latidos);\n      monitor.latido = data.latidos;\n    } else if (data.temperatura) {\n      monitor.temperaturas.push(data.temperatura);\n      monitor.temperatura = data.temperatura;\n      monitor.movimiento = data.movimiento;\n    }\n\n    if (monitor.latidos.length >= MAX_LENGTH || monitor.temperaturas.length >= MAX_LENGTH) {\n      const promedios = calcularPromedio(monitor.latidos, monitor.temperaturas);\n      monitor = Object.assign({}, monitor, promedios);\n      monitor.latidos = [];\n      monitor.temperaturas = [];\n\n      MonitoreoPaciente.create({\n        promedioTemperatura: promedios.promedioTemp,\n        promedioPpm: promedios.promedioPpm,\n        estadoMovimiento: monitor.movimiento,\n        estadoTemperatura: monitor.temperatura,\n        estadoPaciente: monitor.estado,\n        estadoPpm: monitor.latido,\n        id_paciente: monitor.paciente.id\n      });\n    }\n\n    setMonitor(monitor);\n\n    return monitor\n  };\n\n  const setMonitor = (monitor) => {\n    monitorData[monitor.id] = monitor;\n  };\n\n  const calcularPromedio = (latidos, temperaturas) => {\n    let totalLatidos = latidos\n      .reduce((a, b) => a + b, 0);\n    let totalTemperatura = temperaturas\n      .reduce((a, b) => a + b, 0);\n\n    return {\n      promedioTemp: totalTemperatura / temperaturas.length,\n      promedioPpm: totalLatidos / latidos.length\n    };\n  };\n\n  const calcularStatus = (monitor, especie) => {\n    const { temperatura, latido } = monitor;\n    const { maxTemp, minTemp, maxPpm, minPpm } = especie;\n    let porcentajeTemperatura = 0;\n    let porcentajeLatidos = 0;\n    if (temperatura > maxTemp) {\n      porcentajeTemperatura = (temperatura * 100 / maxTemp) - 100;\n    } else if (temperatura < minTemp) {\n      porcentajeTemperatura = (temperatura * 100 / minTemp) - 100;\n    }\n\n    if (latido > maxPpm) {\n      porcentajeLatidos = (latido * 100 / maxPpm) - 100;\n    } else if (latido < minPpm) {\n      porcentajeLatidos = (latido * 100 / minPpm) - 100;\n    }\n    return  {\n      porcentajeLatidos,\n      porcentajeTemperatura,\n      margen: Math.abs(porcentajeLatidos) + Math.abs(porcentajeTemperatura)\n    };\n  };\n\n  const getMensaje = (status) => {\n    let mensajes = [];\n    if (status.porcentajeLatidos !== 0) {\n      let mensaje = status.porcentajeLatidos > 0 ? 'Ritmo cardiaco elevado' : 'Ritmo cardiaco bajo';\n      mensajes.push(mensaje);\n    }\n    if (status.porcentajeTemperatura !== 0) {\n      let mensaje = status.porcentajeTemperatura > 0 ? 'Temperatura del paciente elevada' : 'Temperatura del paciente baja';\n      mensajes.push(mensaje);\n    }\n    return mensajes;\n  };\n\n\n\n  arduinoScanner.on('arduinoFound', function (response) {\n    // arduinoScanner.stop();\n    if (sp[response.serialNumber]) {\n      return;\n    }\n    // connectToArduino(response.port);\n    sp[response.serialNumber] = new SerialPort(`${prefix}${response.port}`, {\n      baudrate: 115200,\n      parser: SerialPort.parsers.readline('\\n')\n    }, e => console.log(e));\n\n    sp[response.serialNumber].on('open', function () {\n      console.log('open');\n    });\n    sp[response.serialNumber].on('data', function (data) {\n      // console.log(data);\n      let parsedData = null;\n      try {\n        parsedData = JSON.parse(data);\n        createMonitor(parsedData.idMonitor);\n        addData(parsedData);\n\n      } catch (e) {\n        console.log(e);\n      }\n    });\n  });\n\n}\n\n\n"]}