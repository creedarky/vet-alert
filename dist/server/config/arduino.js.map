{"version":3,"sources":["config/arduino.js"],"names":["socketio","cache","arduinoScanner","console","log","start","isWin","platform","prefix","pacientes","getCurrentPatients","sp","monitorData","monitoresActivos","emitter","on","pacientesActualizados","forEach","currentMonitor","p","monitor","id","paciente","sockets","emit","createMonitor","idMonitor","addData","data","tipo","getMonitor","status","calcularStatus","especie","estado","ESTADOS","OK","margen","MIN_DANGER","DANGER","MIN_WARNING","WARNING","mensajes","getMensaje","length","alerta","actualizarAlerta","fecha","diff","Date","getTime","setMonitor","idPaciente","promedioTemp","promedioPpm","find","latidos","temperaturas","latido","temperatura","movimiento","push","MAX_LENGTH","promedios","calcularPromedio","totalLatidos","reduce","a","b","totalTemperatura","maxTemp","minTemp","maxPpm","minPpm","porcentajeTemperatura","porcentajeLatidos","Math","abs","mensaje","response","serialNumber","port","baudrate","parser","parsers","readline","e","parsedData","JSON","parse"],"mappings":"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","file":"arduino.js","sourcesContent":["import SerialPort from 'serialport';\nimport os from 'os';\nimport ArduinoScanner from '../scanner';\nimport moment from 'moment';\nimport isNil from 'lodash/isNil';\n\nconst MIN_WARNING = 0;\nconst MIN_DANGER = 1;\nconst MAX_LENGTH = 250;\nconst ESTADOS = {\n  OK: 'ok',\n  WARNING: 'warning',\n  DANGER: 'danger'\n};\n\nexport default function(socketio, cache) {\n  const arduinoScanner = new ArduinoScanner();\n  console.log('inicia arduino scanner');\n  arduinoScanner.start(10000);\n  const isWin = os.platform() === 'win32';\n  const prefix = isWin ? '\\\\\\\\.\\\\' : '';\n  let pacientes = cache.getCurrentPatients();\n  let sp = {}; //Serial port\n  let monitorData = {};\n  let monitoresActivos = {};\n  cache.emitter.on('update-patients', (pacientesActualizados) => {\n    console.log('### pacientes', pacientesActualizados);\n    pacientes = pacientesActualizados;\n    pacientes.forEach(p => {\n      const currentMonitor = monitorData[p.monitor.id];\n      if (currentMonitor && currentMonitor.paciente.id !== p.id) {\n        monitorData[p.monitor.id] = null;\n      }\n    });\n    socketio.sockets.emit('updated-patients', pacientesActualizados);\n  });\n\n  console.log('###', socketio.sockets.on, socketio.on);\n\n  socketio.on('edit-paciente', (paciente) => {\n    console.log('socketio.on', paciente);\n  });\n\n  socketio.sockets.on('edit-paciente', (paciente) => {\n    console.log('socketio.on', paciente);\n  });\n\n\n  const createMonitor = (idMonitor) => {\n    if (monitoresActivos[idMonitor]) {\n      return;\n    }\n    monitoresActivos[idMonitor] = idMonitor\n  };\n\n  const addData = (data) => {\n    if (data.tipo !== 'estado') {\n      socketio.sockets.emit('data', data);\n      return;\n    }\n    let monitor = getMonitor(data);\n    let paciente = monitor.paciente;\n\n    const status = calcularStatus(monitor, paciente.especie);\n\n    let estado = ESTADOS.OK;\n\n    if (status.margen > MIN_DANGER) { // TODO definir el porcentaje\n      estado = ESTADOS.DANGER;\n    } else if (status.margen > MIN_WARNING){\n      estado = ESTADOS.WARNING;\n    }\n\n    monitor.estado = estado;\n    data.estado = estado;\n    let mensajes = getMensaje(status);\n    if (mensajes.length) {\n      let alerta = monitor.alerta || {};\n      let actualizarAlerta = isNil(alerta.fecha) || moment().diff(moment(alerta.fecha), 'minutes') >= 5 || (estado !== alerta.tipo && estado === ESTADOS.DANGER);\n      let fecha = new Date();\n      monitor.alerta = actualizarAlerta ? {\n        id: `${monitor.id}${monitor.paciente.id}${fecha.getTime()}`,\n        fecha,\n        mensajes,\n        tipo: estado\n      } : alerta;\n      setMonitor(monitor);\n      // TODO aca deberia mandar notificacion\n    }\n    data.alerta = monitor.alerta;\n    data.idPaciente = paciente.id;\n    data.promedioTemp = monitor.promedioTemp;\n    data.promedioPpm = monitor.promedioPpm;\n    // console.log('to emit', data);\n    socketio.sockets.emit('data', data);\n  };\n\n  const getMonitor = (data) => {\n    let monitor;\n    if (monitorData[data.idMonitor]) {\n      monitor = monitorData[data.idMonitor];\n    } else {\n      let paciente = pacientes.find(p => {\n        return p.monitor.id === data.idMonitor\n      });\n      monitorData[data.idMonitor] = {\n        id: data.idMonitor,\n        paciente: paciente,\n        latidos: [],\n        temperaturas: [],\n        promedioTemp: 0,\n        promedioPpm: 0,\n        latido: null,\n        temperatura: null,\n        movimiento: null\n      };\n\n      monitor = monitorData[data.idMonitor];\n    }\n\n    if (data.latidos) {\n      monitor.latidos.push(data.latidos);\n      monitor.latido = data.latidos;\n    }\n\n    if (data.temperatura) {\n      monitor.temperaturas.push(data.temperatura);\n      monitor.temperatura = data.temperatura;\n      monitor.movimiento = data.movimiento;\n    }\n\n    if (monitor.latidos.length >= MAX_LENGTH || monitor.temperaturas.length >= MAX_LENGTH) {\n      const promedios = calcularPromedio(monitor.latidos, monitor.temperaturas);\n      monitor = Object.assign({}, monitor, promedios);\n      monitor.latidos = [];\n      monitor.temperaturas = [];\n\n      // MonitoreoPaciente.create({\n      //   promedioTemperatura: promedios.promedioTemp,\n      //   promedioPpm: promedios.promedioPpm,\n      //   estadoMovimiento: monitor.movimiento,\n      //   estadoTemperatura: monitor.temperatura,\n      //   estadoPaciente: monitor.estado,\n      //   estadoPpm: monitor.latido,\n      //   id_paciente: monitor.paciente.id\n      // });\n    }\n\n    setMonitor(monitor);\n\n    return monitor\n  };\n\n  const setMonitor = (monitor) => {\n    monitorData[monitor.id] = monitor;\n  };\n\n  const calcularPromedio = (latidos, temperaturas) => {\n    let totalLatidos = latidos\n      .reduce((a, b) => a + b, 0);\n    let totalTemperatura = temperaturas\n      .reduce((a, b) => a + b, 0);\n\n    return {\n      promedioTemp: totalTemperatura / temperaturas.length,\n      promedioPpm: totalLatidos / latidos.length\n    };\n  };\n\n  const calcularStatus = (monitor, especie) => {\n    const { temperatura, latido } = monitor;\n    const { maxTemp, minTemp, maxPpm, minPpm } = especie;\n    let porcentajeTemperatura = 0;\n    let porcentajeLatidos = 0;\n    if (temperatura > maxTemp) {\n      porcentajeTemperatura = (temperatura * 100 / maxTemp) - 100;\n    } else if (temperatura < minTemp) {\n      porcentajeTemperatura = (temperatura * 100 / minTemp) - 100;\n    }\n\n    if (latido > maxPpm) {\n      porcentajeLatidos = (latido * 100 / maxPpm) - 100;\n    } else if (latido < minPpm) {\n      porcentajeLatidos = (latido * 100 / minPpm) - 100;\n    }\n    return  {\n      porcentajeLatidos,\n      porcentajeTemperatura,\n      margen: Math.abs(porcentajeLatidos) + Math.abs(porcentajeTemperatura)\n    };\n  };\n\n  const getMensaje = (status) => {\n    let mensajes = [];\n    if (status.porcentajeLatidos !== 0) {\n      let mensaje = status.porcentajeLatidos > 0 ? 'Ritmo cardiaco elevado' : 'Ritmo cardiaco bajo';\n      mensajes.push(mensaje);\n    }\n    if (status.porcentajeTemperatura !== 0) {\n      let mensaje = status.porcentajeTemperatura > 0 ? 'Temperatura del paciente elevada' : 'Temperatura del paciente baja';\n      mensajes.push(mensaje);\n    }\n    return mensajes;\n  };\n\n\n\n  arduinoScanner.on('arduinoFound', function (response) {\n    // arduinoScanner.stop();\n    if (sp[response.serialNumber]) {\n      return;\n    }\n\n    // connectToArduino(response.port);\n    sp[response.serialNumber] = new SerialPort(`${prefix}${response.port}`, {\n      baudrate: 115200,\n      parser: SerialPort.parsers.readline('\\n')\n    }, e => console.log(e));\n\n    sp[response.serialNumber].on('open', function () {\n      console.log('open');\n    });\n    sp[response.serialNumber].on('data', function (data) {\n      // console.log(data);\n      let parsedData = null;\n      try {\n        parsedData = JSON.parse(data);\n        createMonitor(parsedData.idMonitor);\n        addData(parsedData);\n\n      } catch (e) {\n        console.log(e);\n      }\n    });\n  });\n\n}\n\n\n"]}