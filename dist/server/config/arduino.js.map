{"version":3,"sources":["config/arduino.js"],"names":["socketio","cache","arduinoScanner","console","log","start","isWin","platform","prefix","pacientes","getCurrentPatients","sp","monitorData","monitoresActivos","emitter","on","pacientesActualizados","sockets","emit","createMonitor","idMonitor","upsert","id","activo","addData","data","tipo","monitor","getMonitor","paciente","status","calcularStatus","especie","estado","ESTADOS","OK","margen","MIN_DANGER","DANGER","MIN_WARNING","WARNING","mensajes","getMensaje","length","alerta","actualizarAlerta","fecha","diff","Date","getTime","setMonitor","idPaciente","promedioTemp","promedioPpm","push","promedios","calcularPromedio","create","promedioTemperatura","promedioMovHora","estadoTemperatura","temperatura","estadoMovimiento","latidos","estadoPaciente","id_paciente","find","p","totalLatidos","map","d","reduce","a","b","totalTemperatura","maxTemp","minTemp","maxPpm","minPpm","porcentajeTemperatura","porcentajeLatidos","Math","abs","mensaje","response","stop","serialNumber","port","baudrate","parser","parsers","readline","e","parsedData","JSON","parse"],"mappings":";;;;;;;;;;kBAee,UAASA,QAAT,EAAmBC,KAAnB,EAA0B;AACvC,MAAMC,iBAAiB,uBAAvB;AACAC,UAAQC,GAAR,CAAY,wBAAZ;AACAF,iBAAeG,KAAf,CAAqB,KAArB;AACA,MAAMC,QAAQ,aAAGC,QAAH,OAAkB,OAAhC;AACA,MAAMC,SAASF,QAAQ,SAAR,GAAoB,EAAnC;AACA,MAAIG,YAAYR,MAAMS,kBAAN,EAAhB;AACA,MAAIC,KAAK,EAAT;AACA,MAAIC,cAAc,EAAlB;AACA,MAAIC,mBAAmB,EAAvB;AACAZ,QAAMa,OAAN,CAAcC,EAAd,CAAiB,iBAAjB,EAAoC,UAACC,qBAAD,EAA2B;AAC7DP,gBAAYO,qBAAZ;AACAhB,aAASiB,OAAT,CAAiBC,IAAjB,CAAsB,kBAAtB,EAA0CF,qBAA1C;AACD,GAHD;;AAKA,MAAMG,gBAAgB,SAAhBA,aAAgB,CAACC,SAAD,EAAe;AACnC,QAAIP,iBAAiBO,SAAjB,CAAJ,EAAiC;AAC/B;AACD;AACD,mBAAQC,MAAR,CACE;AACEC,UAAIF,SADN;AAEEG,cAAQ;AAFV,KADF;AAMAV,qBAAiBO,SAAjB,IAA8BA,SAA9B;AACD,GAXD;;AAaA,MAAMI,UAAU,SAAVA,OAAU,CAACC,IAAD,EAAU;AACxB,QAAIA,KAAKC,IAAL,KAAc,QAAlB,EAA4B;AAC1B1B,eAASiB,OAAT,CAAiBC,IAAjB,CAAsB,MAAtB,EAA8BO,IAA9B;AACA;AACD;;AAED,QAAIE,UAAUC,WAAWH,IAAX,CAAd;AACA,QAAII,WAAWF,QAAQE,QAAvB;;AAEA,QAAMC,SAASC,eAAeN,IAAf,EAAqBI,SAASG,OAA9B,CAAf;;AAEA,QAAIC,SAASC,QAAQC,EAArB;;AAEA,QAAIL,OAAOM,MAAP,GAAgBC,UAApB,EAAgC;AAAE;AAChCJ,eAASC,QAAQI,MAAjB;AACD,KAFD,MAEO,IAAIR,OAAOM,MAAP,GAAgBG,WAApB,EAAgC;AACrCN,eAASC,QAAQM,OAAjB;AACD;;AAEDb,YAAQM,MAAR,GAAiBA,MAAjB;AACAR,SAAKQ,MAAL,GAAcA,MAAd;AACA,QAAIQ,WAAWC,WAAWZ,MAAX,CAAf;AACA,QAAIW,SAASE,MAAb,EAAqB;AACnB,UAAIC,SAASjB,QAAQiB,MAAR,IAAkB,EAA/B;AACA,UAAIC,mBAAmB,qBAAMD,OAAOE,KAAb,KAAuB,wBAASC,IAAT,CAAc,sBAAOH,OAAOE,KAAd,CAAd,EAAoC,SAApC,KAAkD,CAAzE,IAA+Eb,WAAWW,OAAOlB,IAAlB,IAA0BO,WAAWC,QAAQI,MAAnJ;AACA,UAAIQ,QAAQ,IAAIE,IAAJ,EAAZ;AACArB,cAAQiB,MAAR,GAAiBC,mBAAmB;AAClCvB,iBAAOK,QAAQL,EAAf,GAAoBK,QAAQE,QAAR,CAAiBP,EAArC,GAA0CwB,MAAMG,OAAN,EADR;AAElCH,oBAFkC;AAGlCL,0BAHkC;AAIlCf,cAAMO;AAJ4B,OAAnB,GAKbW,MALJ;AAMAM,iBAAWvB,OAAX;AACA;AACD;AACDF,SAAKmB,MAAL,GAAcjB,QAAQiB,MAAtB;AACAnB,SAAK0B,UAAL,GAAkBtB,SAASP,EAA3B;AACAG,SAAK2B,YAAL,GAAoBzB,QAAQyB,YAA5B;AACA3B,SAAK4B,WAAL,GAAmB1B,QAAQ0B,WAA3B;AACArD,aAASiB,OAAT,CAAiBC,IAAjB,CAAsB,MAAtB,EAA8BO,IAA9B;AACD,GAxCD;;AA0CA,MAAMG,aAAa,SAAbA,UAAa,CAACH,IAAD,EAAU;AAC3B,QAAIE,gBAAJ;AACA,QAAIf,YAAYa,KAAKL,SAAjB,CAAJ,EAAiC;AAC/BO,gBAAUf,YAAYa,KAAKL,SAAjB,CAAV;AACAO,cAAQF,IAAR,CAAa6B,IAAb,CAAkB7B,IAAlB;AACAtB,cAAQC,GAAR,CAAYuB,QAAQF,IAApB;AACA,UAAIE,QAAQF,IAAR,CAAakB,MAAb,IAAuB,EAA3B,EAA+B;AAC7B,YAAMY,YAAYC,iBAAiB7B,QAAQF,IAAzB,CAAlB;AACAE,kBAAU,sBAAc,EAAd,EAAkBA,OAAlB,EAA2B4B,SAA3B,CAAV;AACA5B,gBAAQF,IAAR,GAAe,EAAf;AACAE,gBAAQF,IAAR,CAAakB,MAAb,GAAsB,CAAtB;AACAO,mBAAWvB,OAAX;AACAxB,gBAAQC,GAAR,CAAYuB,QAAQF,IAApB;AACA,iCAAkBgC,MAAlB,CAAyB;AACvBC,+BAAqBH,UAAUH,YADR;AAEvBC,uBAAaE,UAAUF,WAFA;AAGvBM,2BAAiB,CAHM;AAIvBC,6BAAmBnC,KAAKoC,WAJD;AAKvBC,4BAAkBrC,KAAKsC,OALA;AAMvBC,0BAAgBrC,QAAQM,MAND;AAOvBgC,uBAAatC,QAAQE,QAAR,CAAiBP;AAPP,SAAzB;AASD;AACF,KArBD,MAqBO;AACL,UAAIO,WAAWpB,UAAUyD,IAAV,CAAe,aAAK;AACjC,eAAOC,EAAExC,OAAF,CAAUL,EAAV,KAAiBG,KAAKL,SAA7B;AACD,OAFc,CAAf;AAGAR,kBAAYa,KAAKL,SAAjB,IAA8B;AAC5BE,YAAIG,KAAKL,SADmB;AAE5BS,kBAAUA,QAFkB;AAG5BJ,cAAM,CAACA,IAAD,CAHsB;AAI5B2B,sBAAc3B,KAAKoC,WAJS;AAK5BR,qBAAa5B,KAAKsC;AALU,OAA9B;AAOApC,gBAAUf,YAAYa,KAAKL,SAAjB,CAAV;AACD;;AAED,WAAOO,OAAP;AACD,GAtCD;;AAwCA,MAAMuB,aAAa,SAAbA,UAAa,CAACvB,OAAD,EAAa;AAC9Bf,gBAAYe,QAAQL,EAApB,IAA0BK,OAA1B;AACD,GAFD;;AAIA,MAAM6B,mBAAmB,SAAnBA,gBAAmB,CAAC/B,IAAD,EAAU;AACjC,QAAI2C,eAAe3C,KAChB4C,GADgB,CACZ;AAAA,aAAKC,EAAEP,OAAP;AAAA,KADY,EAEhBQ,MAFgB,CAET,UAACC,CAAD,EAAIC,CAAJ;AAAA,aAAUD,IAAIC,CAAd;AAAA,KAFS,EAEQ,CAFR,CAAnB;AAGA,QAAIC,mBAAmBjD,KACpB4C,GADoB,CAChB;AAAA,aAAKC,EAAET,WAAP;AAAA,KADgB,EAEpBU,MAFoB,CAEb,UAACC,CAAD,EAAIC,CAAJ;AAAA,aAAUD,IAAIC,CAAd;AAAA,KAFa,EAEI,CAFJ,CAAvB;AAGA,WAAO;AACLrB,oBAAcsB,mBAAmBjD,KAAKkB,MADjC;AAELU,mBAAae,eAAe3C,KAAKkB;AAF5B,KAAP;AAID,GAXD;;AAaA,MAAMZ,iBAAiB,SAAjBA,cAAiB,CAACN,IAAD,EAAOO,OAAP,EAAmB;AAAA,QAChC6B,WADgC,GACPpC,IADO,CAChCoC,WADgC;AAAA,QACnBE,OADmB,GACPtC,IADO,CACnBsC,OADmB;AAAA,QAEhCY,OAFgC,GAEK3C,OAFL,CAEhC2C,OAFgC;AAAA,QAEvBC,OAFuB,GAEK5C,OAFL,CAEvB4C,OAFuB;AAAA,QAEdC,MAFc,GAEK7C,OAFL,CAEd6C,MAFc;AAAA,QAENC,MAFM,GAEK9C,OAFL,CAEN8C,MAFM;;AAGxC,QAAIC,wBAAwB,CAA5B;AACA,QAAIC,oBAAoB,CAAxB;AACA,QAAInB,cAAcc,OAAlB,EAA2B;AACzBI,8BAAyBlB,cAAc,GAAd,GAAoBc,OAArB,GAAgC,GAAxD;AACD,KAFD,MAEO,IAAId,cAAce,OAAlB,EAA2B;AAChCG,8BAAyBlB,cAAc,GAAd,GAAoBe,OAArB,GAAgC,GAAxD;AACD;;AAED,QAAIb,UAAUc,MAAd,EAAsB;AACpBG,0BAAqBjB,UAAU,GAAV,GAAgBc,MAAjB,GAA2B,GAA/C;AACD,KAFD,MAEO,IAAId,UAAUe,MAAd,EAAsB;AAC3BE,0BAAqBjB,UAAU,GAAV,GAAgBe,MAAjB,GAA2B,GAA/C;AACD;AACD,WAAQ;AACNE,0CADM;AAEND,kDAFM;AAGN3C,cAAQ6C,KAAKC,GAAL,CAASF,iBAAT,IAA8BC,KAAKC,GAAL,CAASH,qBAAT;AAHhC,KAAR;AAKD,GArBD;;AAuBA,MAAMrC,aAAa,SAAbA,UAAa,CAACZ,MAAD,EAAY;AAC7B,QAAIW,WAAW,EAAf;AACA,QAAIX,OAAOkD,iBAAP,KAA6B,CAAjC,EAAoC;AAClC,UAAIG,UAAUrD,OAAOkD,iBAAP,GAA2B,CAA3B,GAA+B,wBAA/B,GAA0D,qBAAxE;AACAvC,eAASa,IAAT,CAAc6B,OAAd;AACD;AACD,QAAIrD,OAAOiD,qBAAP,KAAiC,CAArC,EAAwC;AACtC,UAAII,WAAUrD,OAAOiD,qBAAP,GAA+B,CAA/B,GAAmC,kCAAnC,GAAwE,+BAAtF;AACAtC,eAASa,IAAT,CAAc6B,QAAd;AACD;AACD,WAAO1C,QAAP;AACD,GAXD;;AAeAvC,iBAAea,EAAf,CAAkB,cAAlB,EAAkC,UAAUqE,QAAV,EAAoB;AACpDjF,YAAQC,GAAR,CAAY,cAAZ;AACAF,mBAAemF,IAAf;AACA,QAAI1E,GAAGyE,SAASE,YAAZ,CAAJ,EAA+B;AAC7B;AACD;AACD;AACA3E,OAAGyE,SAASE,YAAZ,IAA4B,8BAAkB9E,MAAlB,GAA2B4E,SAASG,IAApC,EAA4C;AACtEC,gBAAU,IAD4D;AAEtEC,cAAQ,qBAAWC,OAAX,CAAmBC,QAAnB,CAA4B,IAA5B;AAF8D,KAA5C,EAGzB;AAAA,aAAKxF,QAAQC,GAAR,CAAYwF,CAAZ,CAAL;AAAA,KAHyB,CAA5B;;AAKAjF,OAAGyE,SAASE,YAAZ,EAA0BvE,EAA1B,CAA6B,MAA7B,EAAqC,YAAY;AAC/CZ,cAAQC,GAAR,CAAY,MAAZ;AACD,KAFD;AAGAO,OAAGyE,SAASE,YAAZ,EAA0BvE,EAA1B,CAA6B,MAA7B,EAAqC,UAAUU,IAAV,EAAgB;AACnD;AACA,UAAIoE,aAAa,IAAjB;AACA,UAAI;AACFA,qBAAaC,KAAKC,KAAL,CAAWtE,IAAX,CAAb;AACAN,sBAAc0E,WAAWzE,SAAzB;AACAI,gBAAQqE,UAAR;AACD,OAJD,CAIE,OAAOD,CAAP,EAAU;AACV;AACD;AACF,KAVD;AAWD,GA1BD;AA4BD,C;;AAhND;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMrD,cAAc,CAApB;AACA,IAAMF,aAAa,CAAnB;AACA,IAAMH,UAAU;AACdC,MAAI,IADU;AAEdK,WAAS,SAFK;AAGdF,UAAQ;AAHM,CAAhB","file":"arduino.js","sourcesContent":["import SerialPort from 'serialport';\nimport os from 'os';\nimport { Monitor, MonitoreoPaciente } from '../sqldb';\nimport ArduinoScanner from '../scanner';\nimport moment from 'moment';\nimport isNil from 'lodash/isNil';\n\nconst MIN_WARNING = 0;\nconst MIN_DANGER = 1;\nconst ESTADOS = {\n  OK: 'ok',\n  WARNING: 'warning',\n  DANGER: 'danger'\n};\n\nexport default function(socketio, cache) {\n  const arduinoScanner = new ArduinoScanner();\n  console.log('inicia arduino scanner');\n  arduinoScanner.start(10000);\n  const isWin = os.platform() === 'win32';\n  const prefix = isWin ? '\\\\\\\\.\\\\' : '';\n  let pacientes = cache.getCurrentPatients();\n  let sp = {};\n  let monitorData = {};\n  let monitoresActivos = {};\n  cache.emitter.on('update-patients', (pacientesActualizados) => {\n    pacientes = pacientesActualizados;\n    socketio.sockets.emit('updated-patients', pacientesActualizados);\n  });\n\n  const createMonitor = (idMonitor) => {\n    if (monitoresActivos[idMonitor]) {\n      return;\n    }\n    Monitor.upsert(\n      {\n        id: idMonitor,\n        activo: true\n      }\n    );\n    monitoresActivos[idMonitor] = idMonitor\n  };\n\n  const addData = (data) => {\n    if (data.tipo !== 'estado') {\n      socketio.sockets.emit('data', data);\n      return;\n    }\n\n    let monitor = getMonitor(data);\n    let paciente = monitor.paciente;\n\n    const status = calcularStatus(data, paciente.especie);\n\n    let estado = ESTADOS.OK;\n\n    if (status.margen > MIN_DANGER) { // TODO definir el porcentaje\n      estado = ESTADOS.DANGER;\n    } else if (status.margen > MIN_WARNING){\n      estado = ESTADOS.WARNING;\n    }\n\n    monitor.estado = estado;\n    data.estado = estado;\n    let mensajes = getMensaje(status);\n    if (mensajes.length) {\n      let alerta = monitor.alerta || {};\n      let actualizarAlerta = isNil(alerta.fecha) || moment().diff(moment(alerta.fecha), 'minutes') >= 5 || (estado !== alerta.tipo && estado === ESTADOS.DANGER);\n      let fecha = new Date();\n      monitor.alerta = actualizarAlerta ? {\n        id: `${monitor.id}${monitor.paciente.id}${fecha.getTime()}`,\n        fecha,\n        mensajes,\n        tipo: estado\n      } : alerta;\n      setMonitor(monitor);\n      // TODO aca deberia mandar notificacion\n    }\n    data.alerta = monitor.alerta;\n    data.idPaciente = paciente.id;\n    data.promedioTemp = monitor.promedioTemp;\n    data.promedioPpm = monitor.promedioPpm;\n    socketio.sockets.emit('data', data);\n  };\n\n  const getMonitor = (data) => {\n    let monitor;\n    if (monitorData[data.idMonitor]) {\n      monitor = monitorData[data.idMonitor];\n      monitor.data.push(data);\n      console.log(monitor.data);\n      if (monitor.data.length >= 20) {\n        const promedios = calcularPromedio(monitor.data);\n        monitor = Object.assign({}, monitor, promedios);\n        monitor.data = [];\n        monitor.data.length = 0;\n        setMonitor(monitor);\n        console.log(monitor.data);\n        MonitoreoPaciente.create({\n          promedioTemperatura: promedios.promedioTemp,\n          promedioPpm: promedios.promedioPpm,\n          promedioMovHora: 0,\n          estadoTemperatura: data.temperatura,\n          estadoMovimiento: data.latidos,\n          estadoPaciente: monitor.estado,\n          id_paciente: monitor.paciente.id\n        });\n      }\n    } else {\n      let paciente = pacientes.find(p => {\n        return p.monitor.id === data.idMonitor\n      });\n      monitorData[data.idMonitor] = {\n        id: data.idMonitor,\n        paciente: paciente,\n        data: [data],\n        promedioTemp: data.temperatura,\n        promedioPpm: data.latidos\n      };\n      monitor = monitorData[data.idMonitor];\n    }\n\n    return monitor\n  };\n\n  const setMonitor = (monitor) => {\n    monitorData[monitor.id] = monitor;\n  };\n\n  const calcularPromedio = (data) => {\n    let totalLatidos = data\n      .map(d => d.latidos)\n      .reduce((a, b) => a + b, 0);\n    let totalTemperatura = data\n      .map(d => d.temperatura)\n      .reduce((a, b) => a + b, 0);\n    return {\n      promedioTemp: totalTemperatura / data.length,\n      promedioPpm: totalLatidos / data.length\n    };\n  };\n\n  const calcularStatus = (data, especie) => {\n    const { temperatura, latidos } = data;\n    const { maxTemp, minTemp, maxPpm, minPpm } = especie;\n    let porcentajeTemperatura = 0;\n    let porcentajeLatidos = 0;\n    if (temperatura > maxTemp) {\n      porcentajeTemperatura = (temperatura * 100 / maxTemp) - 100;\n    } else if (temperatura < minTemp) {\n      porcentajeTemperatura = (temperatura * 100 / minTemp) - 100;\n    }\n\n    if (latidos > maxPpm) {\n      porcentajeLatidos = (latidos * 100 / maxPpm) - 100;\n    } else if (latidos < minPpm) {\n      porcentajeLatidos = (latidos * 100 / minPpm) - 100;\n    }\n    return  {\n      porcentajeLatidos,\n      porcentajeTemperatura,\n      margen: Math.abs(porcentajeLatidos) + Math.abs(porcentajeTemperatura)\n    };\n  };\n\n  const getMensaje = (status) => {\n    let mensajes = [];\n    if (status.porcentajeLatidos !== 0) {\n      let mensaje = status.porcentajeLatidos > 0 ? 'Ritmo cardiaco elevado' : 'Ritmo cardiaco bajo';\n      mensajes.push(mensaje);\n    }\n    if (status.porcentajeTemperatura !== 0) {\n      let mensaje = status.porcentajeTemperatura > 0 ? 'Temperatura del paciente elevada' : 'Temperatura del paciente baja';\n      mensajes.push(mensaje);\n    }\n    return mensajes;\n  };\n\n\n\n  arduinoScanner.on('arduinoFound', function (response) {\n    console.log('arduinoFound');\n    arduinoScanner.stop();\n    if (sp[response.serialNumber]) {\n      return;\n    }\n    // connectToArduino(response.port);\n    sp[response.serialNumber] = new SerialPort(`${prefix}${response.port}`, {\n      baudrate: 9600,\n      parser: SerialPort.parsers.readline('\\n')\n    }, e => console.log(e));\n\n    sp[response.serialNumber].on('open', function () {\n      console.log('open');\n    });\n    sp[response.serialNumber].on('data', function (data) {\n      // console.log(data);\n      let parsedData = null;\n      try {\n        parsedData = JSON.parse(data);\n        createMonitor(parsedData.idMonitor);\n        addData(parsedData);\n      } catch (e) {\n        // console.error('data incorrect received');\n      }\n    });\n  });\n\n}\n\n\n"]}