{"version":3,"sources":["scanner/index.js"],"names":["util","require","EventEmitter","SerialPort","boards","ArduinoScanner","opts","self","call","options","debug","port","serialNumber","board","message","console","log","search","list","err","ports","length","emit","arduinos","filter","matched","comName","manufacturer","toLowerCase","includes","productId","indexOf","forEach","inherits","prototype","start","interval","searchInterval","setInterval","stop","clearInterval","module","exports"],"mappings":"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","file":"index.js","sourcesContent":["/**\n * A module which scans for available arduino ports, and\n * emits an event when an valid port is found.\n *\n * @author UBCSailbot\n * @author areksredzki\n * @author joshuabaker2\n */\n\n/* eslint-disable */\nvar util = require('util');\nvar EventEmitter = require('events').EventEmitter;\nvar SerialPort = require('serialport');\nvar boards = require('./boards.js');\n\n/**\n * Constructor\n *\n * @param  {Object} options Options for the consumer to pass in\n */\nvar ArduinoScanner = function(opts) {\n  var self = this;\n\n  EventEmitter.call(self);\n\n  opts = opts || {};\n\n  self.options = {\n    debug: opts.debug || false,\n    // Strict matching for a specific serial port\n    port: opts.port,\n    // Strict matching for a specifc serial number\n    serialNumber: opts.serialNumber,\n    // Restricts matching if defined\n    board: opts.board\n  };\n\n  self.debug = self.options.debug ? function(message) {\n    console.log('Arduino: ' + message);\n  } : function() {};\n\n  /**\n   * Searches the serial ports for any device that has a vendor id and product\n   * id that matches the arduino's. It only emits the first Arduino it finds. If\n   * you want it to return multiple Arduinos, take out the 'return matched'\n   * within the ports.some(function(port){}). If you want more information on\n   * all the ports that it is skipping over, pass 'true' as the second parameter\n   * to scan.start()\n   *\n   * i.e.\n   * scan.start(500, true)\n   */\n  this.search = function() {\n    const self = this;\n\n    SerialPort.list(function(err, ports) {\n      if (err || ports.length === 0) {\n        self.emit('noPortsFound', {\n          message: 'Nothing detected in serial ports. Check connections.'\n        });\n        return;\n      }\n      const arduinos = ports.filter(function(port) {\n        let matched = true;\n\n        if (self.options.port) {\n          matched = matched && port.comName === self.options.port;\n        }\n\n        if (self.options.serialNumber) {\n          matched = matched && port.serialNumber === self.options.serialNumber;\n        }\n        if (port.manufacturer && port.manufacturer.toLowerCase().includes('arduino')) {\n          matched = true\n        } else if (port.productId){\n          matched = matched && port.productId in boards;\n          if (self.options.board) {\n            matched = matched && boards[port.productId].indexOf(self.options.board) !== -1;\n          }\n        } else {\n          matched = false\n        }\n\n\n        return matched;\n      });\n      arduinos.forEach((port) => {\n        self.emit('arduinoFound', {\n          port: port.comName,\n          serialNumber: port.serialNumber,\n          message: 'Arduino found at port ' + port.comName + '.'\n        });\n      })\n\n    });\n  };\n};\n\nutil.inherits(ArduinoScanner, EventEmitter);\n\n/**\n * Starts scanning for valid Arduino serial ports.\n * It will emit an 'arduinoFound event once a port is found.\n *\n * @param  {Number} interval Time in milliseconds before trying port reads again\n */\nArduinoScanner.prototype.start = function(interval) {\n  // If the interval isn't set, default to 500 ms.\n  this.search();\n  interval = interval || 100000;\n\n  var self = this;\n\n  self.searchInterval = setInterval(function() {\n    self.search();\n  }, interval);\n};\n\n/**\n * Stop searching.\n */\nArduinoScanner.prototype.stop = function() {\n  var self = this;\n\n  if (self.searchInterval) {\n    clearInterval(self.searchInterval);\n    self.debug('Arduino scan stopped.');\n  } else {\n    self.debug('Arduino scan was not active.');\n  }\n};\n\nmodule.exports = ArduinoScanner;\n/* eslint-enable */\n"]}