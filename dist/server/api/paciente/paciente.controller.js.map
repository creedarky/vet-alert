{"version":3,"sources":["api/paciente/paciente.controller.js"],"names":["index","show","create","upsert","patch","destroy","req","res","findAll","include","model","as","then","respondWithResult","catch","handleError","find","where","id","params","required","handleEntityNotFound","desactivarPacientes","body","paciente","result","actualizarPacientes","findById","p","patchUpdates","removeEntity","activo","id_monitor","resolve","update","$ne","pacientes","JSON","parse","setCurrentPatients"],"mappings":"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","file":"paciente.controller.js","sourcesContent":["/**\n * Using Rails-like standard naming convention for endpoints.\n * GET     /api/pacientes              ->  index\n * POST    /api/pacientes              ->  create\n * GET     /api/pacientes/:id          ->  show\n * PUT     /api/pacientes/:id          ->  upsert\n * PATCH   /api/pacientes/:id          ->  patch\n * DELETE  /api/pacientes/:id          ->  destroy\n */\n\n\n'use strict';\n\nimport apiUtils from '../apiutils';\nimport cache from '../../cache';\nimport {Paciente, Monitor, Especie, insertLog, Apoderado} from '../../sqldb';\n\n\n// Gets a list of Pacientes\nexport function index(req, res) {\n  return Paciente.findAll({\n    include: [\n      {\n        model: Especie, as: 'especie',\n      },\n      {\n        model: Apoderado, as: 'apoderado'\n      }\n    ]\n  })\n    .then(apiUtils.respondWithResult(res))\n    .catch(apiUtils.handleError(res));\n}\n\n// Gets a single Paciente from the DB\nexport function show(req, res) {\n  return Paciente.find({\n    where: {\n      id: req.params.id\n    }, include: [\n      {\n        model: Especie, as: 'especie',\n      },\n      {\n        model: Apoderado, as: 'apoderado'\n      },\n      {\n        model: Monitor, as: 'monitor', required: false\n      }\n    ]\n  })\n    .then(apiUtils.handleEntityNotFound(res))\n    .then(apiUtils.respondWithResult(res))\n    .catch(apiUtils.handleError(res));\n}\n\n// Creates a new Paciente in the DB\nexport function create(req, res) {\n  return desactivarPacientes(req.body)\n    .then((paciente) => {\n      return Paciente.create(paciente)\n        .then((result) => {\n          actualizarPacientes(paciente);\n          insertLog(req);\n          apiUtils.respondWithResult(res, 201)(result);\n        }).catch(apiUtils.handleError(res));\n    });\n}\n\n// Upserts the given Paciente in the DB at the specified ID\nexport function upsert(req, res) {\n  // if (req.body.id) {\n  //   delete req.body.id;\n  // }\n  return desactivarPacientes(req.body)\n    .then((paciente) => {\n      return Paciente.upsert(paciente, {\n        where: {\n          id: req.params.id\n        }\n      }).then(() => {\n        insertLog(req);\n        actualizarPacientes(paciente);\n        return Paciente.findById(req.params.id)\n          .then(p => {\n            return apiUtils.respondWithResult(res, 200)(p);\n          })\n      }).catch(apiUtils.handleError(res));\n    })\n}\n\n// Updates an existing Paciente in the DB\nexport function patch(req, res) {\n  if (req.body.id) {\n    delete req.body.id;\n  }\n  return Paciente.find({\n    where: {\n      id: req.params.id\n    }\n  })\n    .then(apiUtils.handleEntityNotFound(res))\n    .then(apiUtils.patchUpdates(req.body))\n    .then(apiUtils.respondWithResult(res))\n    .catch(apiUtils.handleError(res));\n}\n\n// Deletes a Paciente from the DB\nexport function destroy(req, res) {\n  return Paciente.find({\n    where: {\n      id: req.params.id\n    }\n  })\n    .then(apiUtils.handleEntityNotFound(res))\n    .then(apiUtils.removeEntity(res))\n    .catch(apiUtils.handleError(res));\n}\n\n\nfunction desactivarPacientes(paciente) {\n  return new Promise(resolve => {\n    paciente.activo = !!paciente.id_monitor;\n    if (!paciente.activo) {\n      return resolve(paciente);\n    }\n    return Paciente.update({\n      id_monitor: null,\n      activo: false\n    }, {\n      where: {\n        id_monitor: paciente.id_monitor\n      }\n    }).then(() => resolve(paciente))\n  })\n}\n\nfunction actualizarPacientes(paciente) {\n  if (!paciente.activo) {\n    return;\n  }\n  return Paciente.findAll({\n    where: {\n      activo: true,\n      id_monitor: {\n        $ne: null\n      }\n    },\n    include: [\n      {\n        model: Monitor, as: 'monitor'\n      },\n      {\n        model: Especie, as: 'especie'\n      }\n    ]\n  }).then(result => {\n    const pacientes = JSON.parse(JSON.stringify(result));\n    cache.setCurrentPatients(pacientes);\n  })\n}\n"]}