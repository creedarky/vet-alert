{"version":3,"sources":["api/user/user.model.js"],"names":["sequelize","DataTypes","User","define","id","type","INTEGER","allowNull","primaryKey","autoIncrement","nombre","STRING","apellido","email","unique","msg","validate","isEmail","password","notEmpty","provider","salt","underscored","underscoredAll","createdAt","updatedAt","freezeTableName","getterMethods","profile","name","role","token","hooks","beforeBulkCreate","users","fields","fn","console","log","totalUpdated","forEach","user","updatePassword","err","length","beforeCreate","beforeUpsert","beforeUpdate","changed","instanceMethods","authenticate","callback","encryptPassword","pwdGen","makeSalt","byteSize","defaultByteSize","arguments","Error","randomBytes","toString","defaultIterations","defaultKeyLength","Buffer","pbkdf2Sync","pbkdf2","key","validatePresenceOf","saltErr","encryptErr","hashedPassword","value"],"mappings":"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","file":"user.model.js","sourcesContent":["'use strict';\n\nimport crypto from 'crypto';\n\nvar validatePresenceOf = function(value) {\n  return value && value.length;\n};\n\nexport default function(sequelize, DataTypes) {\n  var User = sequelize.define('usuario', {\n\n    id: {\n      type: DataTypes.INTEGER,\n      allowNull: false,\n      primaryKey: true,\n      autoIncrement: true\n    },\n    nombre: DataTypes.STRING,\n    apellido: DataTypes.STRING,\n    email: {\n      type: DataTypes.STRING,\n      unique: {\n        msg: 'The specified email address is already in use.'\n      },\n      validate: {\n        isEmail: true\n      }\n    },\n    password: {\n      type: DataTypes.STRING,\n      validate: {\n        notEmpty: true\n      }\n    },\n    provider: DataTypes.STRING,\n    salt: DataTypes.STRING\n  }, {\n    underscored: true,\n    underscoredAll: true,\n    createdAt: 'fecha_creacion',\n    updatedAt: 'fecha_actualizacion',\n    freezeTableName: true,\n\n    /**\n     * Virtual Getters\n     */\n    getterMethods: {\n      // Public profile information\n      profile() {\n        return {\n          name: this.name,\n          role: this.role\n        };\n      },\n\n      // Non-sensitive info we'll be putting in the token\n      token() {\n        return {\n          id: this.id,\n          role: this.role\n        };\n      }\n    },\n\n    /**\n     * Pre-save hooks\n     */\n    hooks: {\n      beforeBulkCreate(users, fields, fn) {\n        console.log('beforeBulCreated');\n        var totalUpdated = 0;\n        users.forEach(user => {\n          user.updatePassword(err => {\n            if (err) {\n              return fn(err);\n            }\n            totalUpdated += 1;\n            if (totalUpdated === users.length) {\n              return fn();\n            }\n          });\n        });\n      },\n      beforeCreate(user, fields, fn) {\n        user.updatePassword(fn);\n      },\n      beforeUpsert(user, fields, fn) {\n        console.log('beforeUpsert', user);\n        return user.updatePassword(fn);\n      },\n      beforeUpdate(user, fields, fn) {\n        if (user.changed('password')) {\n          return user.updatePassword(fn);\n        }\n        fn();\n      },\n\n    },\n\n    /**\n     * Instance Methods\n     */\n    instanceMethods: {\n      /**\n       * Authenticate - check if the passwords are the same\n       *\n       * @param {String} password\n       * @param {Function} callback\n       * @return {Boolean}\n       * @api public\n       */\n      authenticate(password, callback) {\n        if (!callback) {\n          return this.password === this.encryptPassword(password);\n        }\n\n        this.encryptPassword(password, (err, pwdGen) => {\n          if (err) {\n            return callback(err);\n          }\n\n          if (this.password === pwdGen) {\n            return callback(null, true);\n          }\n          return callback(null, false);\n        });\n      },\n\n      /**\n       * Make salt\n       *\n       * @param {Number} [byteSize] - Optional salt byte size, default to 16\n       * @param {Function} callback\n       * @return {String}\n       * @api public\n       */\n      makeSalt(byteSize, callback) {\n        var defaultByteSize = 16;\n\n        if (typeof arguments[0] === 'function') {\n          callback = arguments[0];\n          byteSize = defaultByteSize;\n        } else if (typeof arguments[1] === 'function') {\n          callback = arguments[1];\n        } else {\n          throw new Error('Missing Callback');\n        }\n\n        if (!byteSize) {\n          byteSize = defaultByteSize;\n        }\n\n        return crypto.randomBytes(byteSize, function(err, salt) {\n          if (err) {\n            return callback(err);\n          }\n          return callback(null, salt.toString('base64'));\n        });\n      },\n\n      /**\n       * Encrypt password\n       *\n       * @param {String} password\n       * @param {Function} callback\n       * @return {String}\n       * @api public\n       */\n      encryptPassword(password, callback) {\n        if (!password || !this.salt) {\n          return callback ? callback(null) : null;\n        }\n\n        const defaultIterations = 10000;\n        const defaultKeyLength = 64;\n        const salt = new Buffer(this.salt, 'base64');\n\n        if (!callback) {\n          return crypto.pbkdf2Sync(password, salt, defaultIterations, defaultKeyLength)\n                       .toString('base64');\n        }\n\n        return crypto.pbkdf2(password, salt, defaultIterations, defaultKeyLength,\n          function(err, key) {\n            if (err) {\n              return callback(err);\n            }\n            return callback(null, key.toString('base64'));\n          });\n      },\n\n      /**\n       * Update password field\n       *\n       * @param {Function} fn\n       * @return {String}\n       * @api public\n       */\n      updatePassword(fn) {\n        // Handle new/update passwords\n        if (!this.password) return fn(null);\n\n        if (!validatePresenceOf(this.password)) {\n          fn(new Error('Invalid password'));\n        }\n\n        // Make salt with a callback\n        this.makeSalt((saltErr, salt) => {\n          if (saltErr) {\n            return fn(saltErr);\n          }\n          this.salt = salt;\n          this.encryptPassword(this.password, (encryptErr, hashedPassword) => {\n            if (encryptErr) {\n              fn(encryptErr);\n            }\n            console.log(this.salt, this.password, hashedPassword);;\n            this.password = hashedPassword;\n            fn(null);\n          });\n        });\n      }\n    }\n  });\n\n  return User;\n}\n"]}