{"version":3,"sources":["auth/auth.service.js"],"names":["isAuthenticated","hasRole","hasPermission","signToken","setTokenCookie","validateJwt","secret","secrets","session","use","req","res","next","query","hasOwnProperty","headers","authorization","access_token","cookies","token","find","where","id","user","include","model","as","then","status","end","catch","err","roleRequired","Error","meetsRequirements","userRoles","indexOf","role","send","permissionRequired","permissions","rol","permisos","map","p","includes","sign","expiresIn","cookie","redirect"],"mappings":"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","file":"auth.service.js","sourcesContent":["'use strict';\nimport config from '../config/environment';\nimport jwt from 'jsonwebtoken';\nimport expressJwt from 'express-jwt';\nimport compose from 'composable-middleware';\nimport {User, Rol, Permiso} from '../sqldb';\n\nvar validateJwt = expressJwt({\n  secret: config.secrets.session\n});\n\n/**\n * Attaches the user object to the request if authenticated\n * Otherwise returns 403\n */\nexport function isAuthenticated() {\n  return compose()\n    // Validate jwt\n    .use(function(req, res, next) {\n      // allow access_token to be passed through query parameter as well\n      if (req.query && req.query.hasOwnProperty('access_token')) {\n        req.headers.authorization = `Bearer ${req.query.access_token}`;\n      }\n     // IE11 forgets to set Authorization header sometimes. Pull from cookie instead.\n      if (req.query && typeof req.headers.authorization === 'undefined') {\n        req.headers.authorization = `Bearer ${req.cookies.token}`;\n      }\n      validateJwt(req, res, next);\n    })\n    // Attach user to request\n    .use(function(req, res, next) {\n      User.find({\n        where: {\n          id: req.user.id\n        },\n        include: [\n          {\n            model: Rol, as: 'rol',\n            include: [\n              Permiso\n            ]\n          }\n        ]\n      })\n        .then(user => {\n          if (!user) {\n            return res.status(401).end();\n          }\n          req.user = user;\n          next();\n        })\n        .catch(err => next(err));\n    });\n}\n\n/**\n * Checks if the user role meets the minimum requirements of the route\n */\nexport function hasRole(roleRequired) {\n  if (!roleRequired) {\n    throw new Error('Required role needs to be set');\n  }\n\n  return compose()\n    .use(isAuthenticated())\n    .use(function meetsRequirements(req, res, next) {\n      if (config.userRoles.indexOf(req.user.role) >= config.userRoles.indexOf(roleRequired)) {\n        return next();\n      } else {\n        return res.status(403).send('Forbidden');\n      }\n    });\n}\n\nexport function hasPermission(permissionRequired) {\n  if (!permissionRequired) {\n    throw new Error('Required role needs to be set');\n  }\n  return compose()\n    .use(isAuthenticated())\n    .use(function meetsRequirements(req, res, next) {\n      const permissions = req.user.rol.permisos.map(p => p.id);\n      if (permissions.includes(permissionRequired)) {\n        return next()\n      }\n      return res.status(403).send('Forbidden');\n    });\n}\n/**\n * Returns a jwt token signed by the app secret\n */\nexport function signToken(id, role) {\n  return jwt.sign({ id, role }, config.secrets.session, {\n    expiresIn: 60 * 60 * 5\n  });\n}\n\n/**\n * Set token cookie directly for oAuth strategies\n */\nexport function setTokenCookie(req, res) {\n  if (!req.user) {\n    return res.status(404).send('It looks like you aren\\'t logged in, please try again.');\n  }\n  var token = signToken(req.user.id, req.user.role);\n  res.cookie('token', token);\n  res.redirect('/');\n}\n"]}