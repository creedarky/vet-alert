{"version":3,"sources":["sqldb/index.js"],"names":["db","Sequelize","sequelize","database","username","password","host","port","Monitor","import","Ciudad","Rol","Permiso","RolPermiso","Paciente","MonitoreoPaciente","Log","Evento","Especie","Comuna","Apoderado","User","belongsTo","foreignKey","belongsToMany","through","model","unique","constraints","module","exports"],"mappings":"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","file":"index.js","sourcesContent":["/**\n * Sequelize initialization module\n */\n\n'use strict';\n\nimport config from '../config/environment';\nimport Sequelize from 'sequelize';\n\nconst db = {\n  Sequelize,\n  // sequelize: new Sequelize(config.sequelize.uri, config.sequelize.options)\n  sequelize: new Sequelize(config.sequelize.database, config.sequelize.username, config.sequelize.password, {\n    host: config.sequelize.host,\n    port: config.sequelize.port\n  })\n};\n\n// Insert models below\ndb.Monitor = db.sequelize.import('../api/monitor/monitor.model');\ndb.Ciudad = db.sequelize.import('../api/ciudad/ciudad.model');\ndb.Rol = db.sequelize.import('../api/rol/rol.model');\ndb.Permiso = db.sequelize.import('../api/permiso/permiso.model');\ndb.RolPermiso = db.sequelize.import('../api/rol-permiso/rol-permiso.model');\ndb.Paciente = db.sequelize.import('../api/paciente/paciente.model');\ndb.MonitoreoPaciente = db.sequelize.import('../api/monitoreo-paciente/monitoreo-paciente.model');\ndb.Log = db.sequelize.import('../api/log/log.model');\ndb.Evento = db.sequelize.import('../api/evento/evento.model');\ndb.Especie = db.sequelize.import('../api/especie/especie.model');\ndb.Comuna = db.sequelize.import('../api/comuna/comuna.model');\ndb.Apoderado = db.sequelize.import('../api/apoderado/apoderado.model');\ndb.User = db.sequelize.import('../api/user/user.model');\n\ndb.Apoderado.belongsTo(db.Comuna, {foreignKey: 'id_comuna'});\ndb.Comuna.belongsTo(db.Ciudad, {foreignKey: 'id_ciudad'});\ndb.Paciente.belongsTo(db.Apoderado, {foreignKey: 'id_apoderado'});\ndb.Paciente.belongsTo(db.Especie, {foreignKey: 'id_especie'});\ndb.Paciente.belongsTo(db.Monitor, {foreignKey: 'id_monitor'});\ndb.Log.belongsTo(db.Evento, {foreignKey: 'id_evento'});\ndb.Log.belongsTo(db.User, {foreignKey: 'id_usuario'});\ndb.Log.belongsTo(db.Paciente, {foreignKey: 'id_paciente'});\ndb.User.belongsTo(db.Rol, {foreignKey: 'id_rol'});\ndb.MonitoreoPaciente.belongsTo(db.Paciente, {foreignKey: 'id_paciente'});\n\ndb.Rol.belongsToMany(db.Permiso, {\n  through: {\n    model: db.RolPermiso,\n    unique: false,\n  },\n  foreignKey: 'id_rol',\n  constraints: false\n});\ndb.Permiso.belongsToMany(db.Rol, {\n  through: {\n    model: db.RolPermiso,\n    unique: false\n  },\n  foreignKey: 'id_permiso',\n  constraints: false\n});\nmodule.exports = db;\n"]}