{"version":3,"sources":["app.js"],"names":["Paciente","Especie","Monitor","seedDB","require","app","server","createServer","socketio","serveClient","env","path","default","startServer","findAll","where","activo","id_monitor","$ne","include","model","as","then","pacientes","JSON","parse","result","setCurrentPatients","angularFullstack","listen","port","ip","console","log","get","sequelize","sync","catch","err","exports","module"],"mappings":"AAAA;;;;AAIA;;;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;IAEQA,Q,mBAAAA,Q;IAAUC,O,mBAAAA,O;IAASC,O,mBAAAA,O;;AAE3B;;AACA,IAAI,sBAAOC,MAAX,EAAmB;AACjBC,UAAQ,eAAR;AACD;;AAED;AACA,IAAMC,MAAM,wBAAZ,C,CAAuB;AACvB,IAAMC,SAAS,eAAKC,YAAL,CAAkBF,GAAlB,CAAf;AACA,IAAMG,WAAWJ,QAAQ,WAAR,EAAqBE,MAArB,EAA6B;AAC5CG,eAAa,sBAAOC,GAAP,KAAe,YADgB;AAE5CC,QAAM;AAFsC,CAA7B,CAAjB;;AAKAP,QAAQ,kBAAR,EAA4BQ,OAA5B,CAAoCP,GAApC;AACAD,QAAQ,UAAR,EAAoBQ,OAApB,CAA4BP,GAA5B;;AAEA;AACA,SAASQ,WAAT,GAAuB;AACrBb,WAASc,OAAT,CAAiB;AACfC,WAAO;AACLC,cAAQ,IADH;AAELC,kBAAY;AACVC,aAAK;AADK;AAFP,KADQ;AAOfC,aAAS,CACP;AACEC,aAAOlB,OADT,EACkBmB,IAAI;AADtB,KADO,EAIP;AACED,aAAOnB,OADT,EACkBoB,IAAI;AADtB,KAJO;AAPM,GAAjB,EAeGC,IAfH,CAeQ,kBAAU;AAChB,QAAMC,YAAYC,KAAKC,KAAL,CAAW,yBAAeC,MAAf,CAAX,CAAlB;AACA,oBAAMC,kBAAN,CAAyBJ,SAAzB;AACAnB,YAAQ,mBAAR,EAA6BQ,OAA7B,CAAqCJ,QAArC;AACAJ,YAAQ,kBAAR,EAA4BQ,OAA5B,CAAoCJ,QAApC;AACD,GApBD;;AAsBAH,MAAIuB,gBAAJ,GAAuBtB,OAAOuB,MAAP,CAAc,sBAAOC,IAArB,EAA2B,sBAAOC,EAAlC,EAAsC,YAAW;AACtEC,YAAQC,GAAR,CAAY,4CAAZ,EAA0D,sBAAOH,IAAjE,EAAuEzB,IAAI6B,GAAJ,CAAQ,KAAR,CAAvE;AACD,GAFsB,CAAvB;AAGD;;AAED,gBAAMC,SAAN,CAAgBC,IAAhB,GACGd,IADH,CACQT,WADR,EAEGwB,KAFH,CAES,UAASC,GAAT,EAAc;AACnB,QAAMA,GAAN;AACAN,UAAQC,GAAR,CAAY,yCAAZ,EAAuDK,GAAvD;AACD,CALH;;AAOA;AACAC,UAAUC,OAAOD,OAAP,GAAiBlC,GAA3B","file":"app.js","sourcesContent":["/**\n * Main application file\n */\n\n'use strict';\n\nimport express from 'express';\nimport http from 'http';\nimport sqldb from './sqldb';\nimport config from './config/environment';\nimport cache from './cache'\n\nconst { Paciente, Especie, Monitor } = sqldb;\n\n// Inyectar datos de prueba\nif (config.seedDB) {\n  require('./config/seed');\n}\n\n// Setup server\nconst app = express(); //framework para apis\nconst server = http.createServer(app);\nconst socketio = require('socket.io')(server, {\n  serveClient: config.env !== 'production',\n  path: '/socket.io-client'\n});\n\nrequire('./config/express').default(app);\nrequire('./routes').default(app);\n\n// Start server\nfunction startServer() {\n  Paciente.findAll({\n    where: {\n      activo: true,\n      id_monitor: {\n        $ne: null\n      }\n    },\n    include: [\n      {\n        model: Monitor, as: 'monitor'\n      },\n      {\n        model: Especie, as: 'especie'\n      }\n    ]\n  }).then(result => {\n    const pacientes = JSON.parse(JSON.stringify(result));\n    cache.setCurrentPatients(pacientes);\n    require('./config/socketio').default(socketio, cache);\n    require('./config/arduino').default(socketio, cache);\n  });\n\n  app.angularFullstack = server.listen(config.port, config.ip, function() {\n    console.log('Express server listening on %d, in %s mode', config.port, app.get('env'));\n  });\n}\n\nsqldb.sequelize.sync()\n  .then(startServer)\n  .catch(function(err) {\n    throw err;\n    console.log('Server failed to start due to error: %s', err);\n  });\n\n// Expose app\nexports = module.exports = app;\n"]}